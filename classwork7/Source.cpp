#include <stdio.h>
#include <iostream>
#include <locale.h>
#include <time.h>
#define N 5 //число строк
#define M 4 //число столбцов
int main()
{
	setlocale(LC_ALL, "");
	srand(time(NULL));
	//Бинарный метод в упорядоченном массиве
	//int L = 0, R = N - 1, m, A[N] = {1,2,3,4,5,6,7,8,9,10}, flag = 0, x = 0;
	////переменная флаг, нашли (1) или нет (0)
	////Здесь надо ввести массив А
	////и отсортировать его по возрастанию
	//printf("Введите искомый элемент\n");
	//scanf_s("%d", &x);
	//
	//while (L<=R)
	//{
	//	m = (L + R) / 2; //середина интервала
	//	if (A[m] == x) //нашли нужный элемент
	//	{
	//		flag = 1; //установить флаг
	//		break; //выйти из цикла
	//	}
	//	if (x<A[m])
	//	{
	//		R = m - 1; //сужаем границы области поиска
	//	}
	//	else
	//	{
	//		L = m + 1;
	//	}
	//}
	//if (flag)
	//{
	//	printf("Нашли: A[%d]=%d", m, A[m]);
	//}
	//else
	//{
	//	printf("Такого элемента нет!\n");
	//}

	////Метод Выбора
	//int x[N] = { 1,2,3,4,5,6,7,8,9,10 }, c=0, nMin = 0;
	//for (size_t i = 0; i < N-1; i++) //нужно N-1 проходов
	//{
	//	nMin = i;
	//	for (size_t j = i + 1; j < N; j++)//поиск минимального А[i] до А[N-1]
	//		if (x[j] < x[nMin]) nMin = j;
	//	if (nMin !=i)
	//	{
	//		c = x[i];
	//		x[i] = x[nMin]; //Если нужно переставляем
	//		x[nMin] = c;
	//	}
	//}

	////ввод с клавиатуры
	//int i, j, A[M][N];
	//for (size_t i = 0; i < M; i++) //цикл по строкам
	//	for (size_t j = 0; j < N; j++) //цикл по столбцам строки
	//	{
	//		printf("A[%d][%d]= ",i,j); //подсказка для ввода
	//		scanf_s("%d", &A[i][j]); //ввод А[i][j]
	//	}
	////работа с матрицей

	////Вывод на экран
	//printf("Матрица A\n");
	//for (size_t i = 0; i < M; i++) //цикл по строкам
	//	for (size_t j = 0; j < N; j++) //вывод одной строки(в цикле)
	//	{
	//		printf("%4d", A[i][j]); //4 символа на число
	//		printf("\n"); //переход на другую строку
	//	}

	/*
	2.	В прямоугольной матрице найти наибольший из минимальных элементов строк матрицы
	*/

	/*int A[10][10] = { 0 }, Min = 10, Max = 0;
	for (size_t i = 0; i < 10; i++)
	{
		for (size_t j = 0; j < 10; i++)
		{
			A[i][i] = 1 + rand() % 10;
			printf("%d\t", A[i][j]);
		}
		printf("\n\n");
	}
	for (size_t i = 0; i < 10; i++)
	{	
		Min = 10;
		for (size_t j = 0; j < 10; j++)
		{
			if (A[i][j] < Min)
				Min = A[i][j];
		}
		printf("%d, ", Min);

		if (Min > Max)
			Max = Min;
	}
	printf("Макс число = %d\n", Max);*/

	/*
	3.Ввести массив, состоящий из 15-ти элементов (двузначные целые числа).
	Изменить разрядность цифр, образующих элементы исходного массива и,
	таким образом, сформировать новый массив. 
	Например, исходный массив: 25 71 84…, новый массив: 52 17 48….
	*/
	/*int x[15] = { 0 };
	for (size_t i = 0; i < 15; i++)
	{
		x[i] = 10 + rand() % 99;
		if (x[i] % 10 == 0)
		{
			i--;
		}
		else
		{
			printf("%d\n", x[i]);
		}
	}
	printf("\n");
	for (size_t i = 0; i < 15; i++)
	{
		x[i] = ((x[i] % 10) * 10) + (x[i] / 10);
		printf("%d\n", x[i]);
	}
	printf("\n");*/
	
	/*
	5.	Дан массив, состоящий из 12 двоичных чисел.
	Удалить элементы, которые встречаются более двух раз.
	*/
	//int A[5][5] = { 0 }, count = 0, B[5][5] = { 0 };
//for (int i = 0; i < 5; i++)
//{
//	for (int j = 0; j < 5; j++)
//	{
//		A[i][j] = 10 + rand() % 40;
//		printf("%d\t", A[i][j]);
//	}
//
//	printf("\n\n");
//}
//for (int k = 0; k < 5; k++)
//{
//	for (int p = 0; p < 5; p++)
//	{
//		count = 0;
//		for (int i = 0; i < 5; i++)
//		{
//			for (int j = 0; j < 5; j++)
//			{
//				if (A[k][p] == A[i][j])// && A[k][p]!=0
//					count++;
//			}
//		}
//
//		if (count - 1 >= 2)
//		{
//			for (int i = 0; i < 5; i++)
//			{
//				for (int j = 0; j < 5; j++)
//				{
//					if (A[k][p] == A[i][j])
//						B[i][j] = -1;
//				}
//			}
//		}
//
//	}
//}
//
//for (int k = 0; k < 5; k++)
//{
//	for (int p = 0; p < 5; p++)
//	{
//		if (B[k][p] == -1)
//			A[k][p] = 0;
//	}
//}
//
//printf("\n-----------------\n");
//for (int i = 0; i < 5; i++)
//{
//	for (int j = 0; j < 5; j++)
//	{
//
//		printf("%d\t", B[i][j]);
//	}
//
//
//	printf("\n\n");
//}

	system("pause");
}